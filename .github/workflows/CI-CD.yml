name: CI/CD Pipeline for Dockerized Node.js App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "MESSENGER_PAGE_ACCESS_TOKEN=${{ secrets.MESSENGER_PAGE_ACCESS_TOKEN }}" >> $GITHUB_ENV
        echo "MESSENGER_APP_SECRET=${{ secrets.MESSENGER_APP_SECRET }}" >> $GITHUB_ENV
        echo "MESSENGER_VERIFY_TOKEN=${{ secrets.MESSENGER_VERIFY_TOKEN }}" >> $GITHUB_ENV
        echo "MESSENGER_PAGE_ID=${{ secrets.MESSENGER_PAGE_ID }}" >> $GITHUB_ENV
        echo "AUTHORIZED_MESSENGER_USER_ID=${{ secrets.AUTHORIZED_MESSENGER_USER_ID }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "ANTHROPIC_KEY=${{ secrets.ANTHROPIC_KEY }}" >> $GITHUB_ENV
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> $GITHUB_ENV
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV

    - name: Log in to DigitalOcean Registry
      run: echo "${{ secrets.DO_REGISTRY_TOKEN }}" | docker login -u "${{ secrets.DO_REGISTRY_USERNAME }}" --password-stdin registry.digitalocean.com

    - name: Build Docker image
      run: docker build -t registry.digitalocean.com/ray-ban-ai-assistant/${{ secrets.DO_REPO_NAME }}:${{ github.sha }} .

    - name: Push Docker image to DigitalOcean Registry
      run: docker push registry.digitalocean.com/ray-ban-ai-assistant/${{ secrets.DO_REPO_NAME }}:${{ github.sha }}

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy Docker container
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_PORT }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          set -e
          cd /var/www/Ray-Ban-Ai-Assistant

          echo "Logging into Docker registry..."
          echo "${{ secrets.DO_REGISTRY_TOKEN }}" | docker login -u "${{ secrets.DO_REGISTRY_USERNAME }}" --password-stdin registry.digitalocean.com

          echo "Pulling Docker image..."
          docker-compose down || true
          docker-compose pull app
          docker-compose up -d --build
        EOF
      env:
        NODE_ENV: production
        TARGET: production
